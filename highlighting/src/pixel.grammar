@external propSource highlighting from "./pixel-highlight.js"

kw<term> { @specialize[@name={term}]<Identifier, term> }

@top PixelProgram { 
  (Statement)*
}

Block {
  LeftBrace (Statement)* RightBrace
}

Statement {
  VariableDecl Semicolon |
  Assignment Semicolon |
  PrintStatement Semicolon | 
  DelayStatement Semicolon |
  PixelStatement Semicolon |
  IfStatement |
  ForStatement |
  WhileStatement |
  RtrnStatement Semicolon | 
  FunctionDecl |
  Block
}

VariableDecl {
  kw<"let"> Identifier Colon Typename Equals Expr
}

PrintStatement { kw<"__print"> Expr }

DelayStatement { kw<"__delay"> Expr }

PixelStatement {
  kw<"__pixelr"> Expr Comma Expr Comma Expr Comma Expr Comma Expr
  kw<"__pixel"> Expr Comma Expr Comma Expr
}

RtrnStatement {
  kw<"return"> Expr
}

IfStatement {
  kw<"if"> LeftBracket Expr RightBracket Block (kw<"else"> Block)?
}

ForStatement {
  kw<"for"> LeftBracket (VariableDecl)? Semicolon Expr Semicolon (Assignment)? RightBracket Block
}

WhileStatement {
  kw<"while"> LeftBracket Expr RightBracket Block
}

FormalParam {
  Identifier Colon Typename
}

FormalParams {
  FormalParam (Comma FormalParam)*
}

FunctionDecl {
  kw<"fun"> Identifier RightBracket (FormalParams)? LeftBracket Arrow Typename Block
}

Assignment { LValue Equals Expr }

Expr {
  SimpleExpr |
  SimpleExpr RelationalOp Expr
}

SimpleExpr {
  Term | 
  Term AdditiveOp SimpleExpr
}

Term {
  Factor |
  Factor MultiplicativeOp Term
}

Factor {
  BoolLiteral |
  Number |
  Colour |
  FunctionCall |
  SubExpr |
  UnaryOp Factor |
  kw<"__randi"> Factor |
  kw<"__width"> |
  kw<"__height"> |
  kw<"__read"> Factor |
  LValue
  NewArrExpr
}

LValue {
  Identifier |
  LValue LeftSqBracket Expr RightSqBracket
}

NewArrExpr {
  kw<"__newarr"> Typename Comma Factor
}

ActualParams {
  Expr (Comma Expr)*
}

FunctionCall {
  Identifier LeftBracket (ActualParams)? RightBracket
}

SubExpr {
  LeftBracket Expr RightBracket
}

Typename {
  SimpleTypename
  LeftSqBracket RightSqBracket Typename
}

@skip { space | LineComment | BlockComment }

@tokens {
  @precedence {
    LineComment,
    BlockComment,
    Arrow,
    SimpleTypename,
    BoolLiteral,
    MultiplicativeOp,
    AdditiveOp,
    UnaryOp,
    Identifier
  }

  space { @whitespace+ }
  LineComment { "//" ![\n]* }
  BlockComment { "/*" ( (![*]) | ("*" ![/]) )+ "*/" }

  SimpleTypename {
    "float" |
    "int" |
    "bool" |
    "colour"
  }

  Identifier { $[A-Za-z_] $[A-Za-z_0-9]+ }
  
  BoolLiteral { "true" | "false" }
  Colour { '#' $[0-9a-fA-F]+ }
  Number { $[0-9]* "."? $[0-9]+ }

  LeftBrace { "{" }
  RightBrace { "}" }
  Semicolon { ";" }
  Colon { ":" }
  Equals { "=" }
  Comma { "," }
  LeftBracket { "(" }
  RightBracket { ")" }
  Arrow { "->" }
  MultiplicativeOp { "*" | "/" | "and" }
  AdditiveOp { "+" | "-" | "or" }
  RelationalOp { 
    "<" | ">" | "==" | "!=" | "<=" | ">="
  }
  UnaryOp {
    "-" | "not"
  }
  LeftSqBracket { "[" }
  RightSqBracket { "]" }
}