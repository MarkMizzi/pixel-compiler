import {
  PixIRInstruction,
  PixIROpcode,
  PixIRData,
  PixIRDataType,
  readInstr,
  validateFunctionName
} from './instructions'

export type Program = Map<string, Array<PixIRInstruction>>

export class Assembler {
  /* Validate a program generated by the Assembler instance.
   *
   * Currenly the following checks are implemented:
   * - Check that each function referenced in a push instruction exists in the program.
   * - Check that the program contains a .main function (this is the entry point).
   */
  private validate(program: Program) {
    // check that each function referenced in push instruction is within the program.
    for (let [_, instrs] of program) {
      for (let instr of instrs) {
        if (instr.opcode == PixIROpcode.PUSH) {
          let operand = instr.operand as PixIRData
          if (operand.dtype == PixIRDataType.FUNCTION && !((operand.val as string) in program)) {
            throw Error(`Function ${operand!.val} not found.`)
          }
        }
      }
    }

    if (!('.main' in program)) throw Error('Program does not have a .main function.')
  }

  /* Assemble an input source string into an actual Program object that
   * can be executed by the machine.
   */
  public assemble(src: string): Program {
    let program = new Map()
    let currFuncName = undefined

    while (src.length != 0) {
      let line: string
      ;[line, src] = src.split('\n', 1)
      // remove extra whitespace
      line = line.trim()

      // skip empty or comment lines
      if (line.length == 0 || line[0] == '#') continue

      // check if this line starts a new function
      if (line[0] == '.') {
        currFuncName = line
        validateFunctionName(currFuncName)
        program.set(currFuncName, [])
      }

      if (currFuncName === undefined)
        throw Error('Invalid program; instructions encountered outside of a function.')

      // line must be a new instruction; read it and add it to current function.
      program.get(currFuncName).push(readInstr(line))
    }

    this.validate(program)
    return program
  }
}
